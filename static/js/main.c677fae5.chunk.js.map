{"version":3,"sources":["App.js","index.js"],"names":["Carousel","require","App","mapRef","React","useRef","useState","process","mapKey","lat","lng","mapCenter","mapType","mapMarkers","infoBlock","setInfoBlock","useLoadScript","googleMapsApiKey","isLoaded","loadError","fitBounds","map","bounds","window","google","maps","LatLngBounds","marker","extend","latitude","longitude","className","mapContainerStyle","width","height","zoom","center","options","disableDefaultUI","zoomControl","streetViewControl","mapTypeId","onLoad","current","mapTypeControlOptions","defaultMapTypeId","url","opacity","north","south","west","east","defaultOpacity","imagePath","imageSizes","clusterClass","textColor","averageCenter","gridSize","maxZoom","clusterer","i","position","fixedRotation","icon","scaledSize","fillColor","fillOpacity","zIndex","onClick","id","disableAutoPan","pane","onCloseClick","title","imgs","img","src","alt","ReactDOM","render","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.c677fae5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { \n  GoogleMap, \n  useLoadScript,\n  MarkerClusterer,\n  Marker,\n  InfoWindow,\n  GroundOverlay,\n} from '@react-google-maps/api';\n\nimport './App.css';\n\nconst Carousel = require('nuka-carousel');\n\nfunction App() {\n  const mapRef = React.useRef();\n  const onMapLoad = (map) => {\n    mapRef.current = map;\n    fitBounds(map);\n  }\n\n  const [mapKey] = useState(process.env.REACT_APP_GOOGLE_API_KEY)\n  // eslint-disable-next-line no-unused-vars\n  const [mapCenter, setMapCenter] = useState({ lat: +process.env.REACT_APP_GMAP_DEFAULT_LAT, lng: +process.env.REACT_APP_GMAP_DEFAULT_LNG })\n  // eslint-disable-next-line no-unused-vars\n  const [mapType, setMapType] = useState('roadmap')\n  // eslint-disable-next-line no-unused-vars\n  const [mapMarkers, setMapMarkers] = useState([\n    {\n      'id': 1,\n      'title': 'Кафе «Бауэр»',\n      'latitude': 54.71271641821974,\n      'longitude': 20.51103866041636,\n      'imgs': [1,2],\n    },\n    {\n      'id': 2,\n      \"title\": 'Кафе-Альгамбра',\n      'latitude': 54.71191518014186,\n      'longitude': 20.506736528176404,\n      'imgs': [1,2,3,4],\n    },\n    {\n      'id': 3,\n      \"title\": 'Ресторан «Блутгерихт»',\n      'latitude': 54.71054628804002,\n      'longitude': 20.509596986047494,\n      'imgs': [1,2],\n    },\n    {\n      'id': 4,\n      \"title\": 'Кафе-терраса « Швермер»',\n      'latitude': 54.714550023996075,\n      'longitude': 20.515178198583047,\n      'imgs': [1,2],\n    },\n    {\n      'id': 5,\n      'title': 'Ресторан «Бельвю»',\n      'latitude': 54.71329797948661,\n      'longitude': 20.517352983363896,\n      'imgs': [1,2],\n    },\n    {\n      'id': 6,\n      'title': 'Ресторан «Виктория»',\n      'latitude': 54.71631425778544,\n      'longitude': 20.523354419579764,\n      'imgs': [1,2],\n    },\n  ])\n\n  // eslint-disable-next-line no-unused-vars\n  const [infoBlock, setInfoBlock] = useState(false)\n\n  const {isLoaded, loadError} = useLoadScript({\n    googleMapsApiKey: mapKey,\n  })\n\n  const fitBounds = map => {\n    const bounds = new window.google.maps.LatLngBounds();\n    mapMarkers.map(marker => {\n      bounds.extend({ lat: marker.latitude, lng: marker.longitude });\n      return marker;\n    });\n    map.fitBounds(bounds);\n  };\n\n\n  if (loadError) return <div>Error</div>\n  if (!isLoaded) return <section className=\"map\">Loading...</section>\n\n  return(<>\n    <section className=\"map\">\n      <GoogleMap\n        mapContainerStyle={{ width: '100%', height: '100%' }}\n        zoom={12}\n        center={mapCenter}\n        options={{\n          disableDefaultUI: true,\n          zoomControl: false,\n          streetViewControl: false,\n          mapTypeId: mapType\n        }}\n        onLoad={onMapLoad}\n        mapTypeControlOptions={{\n          mapTypeId: ['satellite']\n        }}\n        defaultMapTypeId={false}\n      >\n        <GroundOverlay\n          url=\"./img/map/map.jpg\"\n          // opacity={0.35}\n          opacity={0.45}\n          bounds={{\n            // север\n            north: 54.71725,\n            // юг\n            south: 54.7037,\n            // запад\n            west: 20.4934,\n            // восток\n            east: 20.52835,\n          }}\n          defaultOpacity={.5}\n        />\n\n        <MarkerClusterer \n          options={{\n            imagePath: '/img/map/cluster',\n            imageSizes: [58],\n            clusterClass: 'map-cluster',\n            textColor: 'red'\n          }}\n          averageCenter={true}\n          gridSize={40}\n          maxZoom={18}\n        >\n          {(clusterer) => \n            mapMarkers.map((marker, i) => (\n              <Marker \n                key={i} \n                position={{ lat: marker.latitude, lng: marker.longitude }} \n                fixedRotation={true}\n                icon={{ \n                  url: './img/map/cup.svg',\n                  scaledSize: { width: 60, height: 60},\n                  // anchor: { x: 15, y: 15 },\n                  fillColor: 'black',\n                  fillOpacity: 1,\n                  zIndex: 200\n                }}\n                clusterer={clusterer} \n                onClick={() => {\n                  if (infoBlock === marker.id)\n                    setInfoBlock(null)\n                  else \n                    setInfoBlock(marker.id)\n                }}\n              >\n                {(infoBlock === marker.id) && (\n\n                <InfoWindow \n                  position={{ lat: marker.latitude, lng: marker.longitude }} \n                  options={{\n                    disableAutoPan: true,\n                    pane: \"floatPane\"\n                  }}\n                  onLoad={function() {}}\n                  onCloseClick={() => setInfoBlock(null)}\n                >\n                  <div \n                    className='map-cluster__title'\n                  >\n                    <h5>{marker.title}</h5>\n                    <div className=\"container\">\n                      <Carousel>\n                        {marker.imgs.map(img => (\n                          <img src={`./img/slider/${marker.id}/${img}.jpg`} alt='img'/>\n                        ))}\n                      </Carousel>\n                    </div>\n                  </div>\n                </InfoWindow>\n                )}\n\n              </Marker>\n            ))\n          }\n        </MarkerClusterer>\n      </GoogleMap>\n    </section>\n  </>)\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.Suspense fallback='loading...'>\n    <App />\n  </React.Suspense>\n  ,document.getElementById('root')\n);"],"sourceRoot":""}